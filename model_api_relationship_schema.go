/*
SWAIN API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiRelationshipSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRelationshipSchema{}

// ApiRelationshipSchema Schema information for a model relationship
type ApiRelationshipSchema struct {
	// ForeignKey is the foreign key in the relationship
	ForeignKey *string `json:"foreignKey,omitempty"`
	// IsPolymorphic indicates if the relationship is polymorphic
	IsPolymorphic *bool `json:"isPolymorphic,omitempty"`
	// IsSlice indicates if the relationship is a slice
	IsSlice *bool `json:"isSlice,omitempty"`
	// JoinTable is the join table in the relationship
	JoinTable *string `json:"joinTable,omitempty"`
	// JsonName of the relationship (from JSON tag if available)
	JsonName *string `json:"jsonName,omitempty"`
	// Name of the relationship (from JSON tag if available)
	Name *string `json:"name,omitempty"`
	// PolymorphicType is the type of the polymorphic relationship
	PolymorphicType *string `json:"polymorphicType,omitempty"`
	// References are the references in the relationship
	References *string `json:"references,omitempty"`
	// Name of the related model
	RelatedModel *string `json:"relatedModel,omitempty"`
	// Name of the related table
	RelatedTable *string `json:"relatedTable,omitempty"`
	// Type of relationship (hasOne, hasMany, belongsTo, manyToMany)
	Type *string `json:"type,omitempty"`
}

// NewApiRelationshipSchema instantiates a new ApiRelationshipSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRelationshipSchema() *ApiRelationshipSchema {
	this := ApiRelationshipSchema{}
	return &this
}

// NewApiRelationshipSchemaWithDefaults instantiates a new ApiRelationshipSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRelationshipSchemaWithDefaults() *ApiRelationshipSchema {
	this := ApiRelationshipSchema{}
	return &this
}

// GetForeignKey returns the ForeignKey field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetForeignKey() string {
	if o == nil || IsNil(o.ForeignKey) {
		var ret string
		return ret
	}
	return *o.ForeignKey
}

// GetForeignKeyOk returns a tuple with the ForeignKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetForeignKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ForeignKey) {
		return nil, false
	}
	return o.ForeignKey, true
}

// HasForeignKey returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasForeignKey() bool {
	if o != nil && !IsNil(o.ForeignKey) {
		return true
	}

	return false
}

// SetForeignKey gets a reference to the given string and assigns it to the ForeignKey field.
func (o *ApiRelationshipSchema) SetForeignKey(v string) {
	o.ForeignKey = &v
}

// GetIsPolymorphic returns the IsPolymorphic field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetIsPolymorphic() bool {
	if o == nil || IsNil(o.IsPolymorphic) {
		var ret bool
		return ret
	}
	return *o.IsPolymorphic
}

// GetIsPolymorphicOk returns a tuple with the IsPolymorphic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetIsPolymorphicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPolymorphic) {
		return nil, false
	}
	return o.IsPolymorphic, true
}

// HasIsPolymorphic returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasIsPolymorphic() bool {
	if o != nil && !IsNil(o.IsPolymorphic) {
		return true
	}

	return false
}

// SetIsPolymorphic gets a reference to the given bool and assigns it to the IsPolymorphic field.
func (o *ApiRelationshipSchema) SetIsPolymorphic(v bool) {
	o.IsPolymorphic = &v
}

// GetIsSlice returns the IsSlice field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetIsSlice() bool {
	if o == nil || IsNil(o.IsSlice) {
		var ret bool
		return ret
	}
	return *o.IsSlice
}

// GetIsSliceOk returns a tuple with the IsSlice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetIsSliceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSlice) {
		return nil, false
	}
	return o.IsSlice, true
}

// HasIsSlice returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasIsSlice() bool {
	if o != nil && !IsNil(o.IsSlice) {
		return true
	}

	return false
}

// SetIsSlice gets a reference to the given bool and assigns it to the IsSlice field.
func (o *ApiRelationshipSchema) SetIsSlice(v bool) {
	o.IsSlice = &v
}

// GetJoinTable returns the JoinTable field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetJoinTable() string {
	if o == nil || IsNil(o.JoinTable) {
		var ret string
		return ret
	}
	return *o.JoinTable
}

// GetJoinTableOk returns a tuple with the JoinTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetJoinTableOk() (*string, bool) {
	if o == nil || IsNil(o.JoinTable) {
		return nil, false
	}
	return o.JoinTable, true
}

// HasJoinTable returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasJoinTable() bool {
	if o != nil && !IsNil(o.JoinTable) {
		return true
	}

	return false
}

// SetJoinTable gets a reference to the given string and assigns it to the JoinTable field.
func (o *ApiRelationshipSchema) SetJoinTable(v string) {
	o.JoinTable = &v
}

// GetJsonName returns the JsonName field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetJsonName() string {
	if o == nil || IsNil(o.JsonName) {
		var ret string
		return ret
	}
	return *o.JsonName
}

// GetJsonNameOk returns a tuple with the JsonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetJsonNameOk() (*string, bool) {
	if o == nil || IsNil(o.JsonName) {
		return nil, false
	}
	return o.JsonName, true
}

// HasJsonName returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasJsonName() bool {
	if o != nil && !IsNil(o.JsonName) {
		return true
	}

	return false
}

// SetJsonName gets a reference to the given string and assigns it to the JsonName field.
func (o *ApiRelationshipSchema) SetJsonName(v string) {
	o.JsonName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiRelationshipSchema) SetName(v string) {
	o.Name = &v
}

// GetPolymorphicType returns the PolymorphicType field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetPolymorphicType() string {
	if o == nil || IsNil(o.PolymorphicType) {
		var ret string
		return ret
	}
	return *o.PolymorphicType
}

// GetPolymorphicTypeOk returns a tuple with the PolymorphicType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetPolymorphicTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PolymorphicType) {
		return nil, false
	}
	return o.PolymorphicType, true
}

// HasPolymorphicType returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasPolymorphicType() bool {
	if o != nil && !IsNil(o.PolymorphicType) {
		return true
	}

	return false
}

// SetPolymorphicType gets a reference to the given string and assigns it to the PolymorphicType field.
func (o *ApiRelationshipSchema) SetPolymorphicType(v string) {
	o.PolymorphicType = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetReferences() string {
	if o == nil || IsNil(o.References) {
		var ret string
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetReferencesOk() (*string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given string and assigns it to the References field.
func (o *ApiRelationshipSchema) SetReferences(v string) {
	o.References = &v
}

// GetRelatedModel returns the RelatedModel field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetRelatedModel() string {
	if o == nil || IsNil(o.RelatedModel) {
		var ret string
		return ret
	}
	return *o.RelatedModel
}

// GetRelatedModelOk returns a tuple with the RelatedModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetRelatedModelOk() (*string, bool) {
	if o == nil || IsNil(o.RelatedModel) {
		return nil, false
	}
	return o.RelatedModel, true
}

// HasRelatedModel returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasRelatedModel() bool {
	if o != nil && !IsNil(o.RelatedModel) {
		return true
	}

	return false
}

// SetRelatedModel gets a reference to the given string and assigns it to the RelatedModel field.
func (o *ApiRelationshipSchema) SetRelatedModel(v string) {
	o.RelatedModel = &v
}

// GetRelatedTable returns the RelatedTable field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetRelatedTable() string {
	if o == nil || IsNil(o.RelatedTable) {
		var ret string
		return ret
	}
	return *o.RelatedTable
}

// GetRelatedTableOk returns a tuple with the RelatedTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetRelatedTableOk() (*string, bool) {
	if o == nil || IsNil(o.RelatedTable) {
		return nil, false
	}
	return o.RelatedTable, true
}

// HasRelatedTable returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasRelatedTable() bool {
	if o != nil && !IsNil(o.RelatedTable) {
		return true
	}

	return false
}

// SetRelatedTable gets a reference to the given string and assigns it to the RelatedTable field.
func (o *ApiRelationshipSchema) SetRelatedTable(v string) {
	o.RelatedTable = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiRelationshipSchema) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRelationshipSchema) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiRelationshipSchema) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiRelationshipSchema) SetType(v string) {
	o.Type = &v
}

func (o ApiRelationshipSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRelationshipSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForeignKey) {
		toSerialize["foreignKey"] = o.ForeignKey
	}
	if !IsNil(o.IsPolymorphic) {
		toSerialize["isPolymorphic"] = o.IsPolymorphic
	}
	if !IsNil(o.IsSlice) {
		toSerialize["isSlice"] = o.IsSlice
	}
	if !IsNil(o.JoinTable) {
		toSerialize["joinTable"] = o.JoinTable
	}
	if !IsNil(o.JsonName) {
		toSerialize["jsonName"] = o.JsonName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PolymorphicType) {
		toSerialize["polymorphicType"] = o.PolymorphicType
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.RelatedModel) {
		toSerialize["relatedModel"] = o.RelatedModel
	}
	if !IsNil(o.RelatedTable) {
		toSerialize["relatedTable"] = o.RelatedTable
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableApiRelationshipSchema struct {
	value *ApiRelationshipSchema
	isSet bool
}

func (v NullableApiRelationshipSchema) Get() *ApiRelationshipSchema {
	return v.value
}

func (v *NullableApiRelationshipSchema) Set(val *ApiRelationshipSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRelationshipSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRelationshipSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRelationshipSchema(val *ApiRelationshipSchema) *NullableApiRelationshipSchema {
	return &NullableApiRelationshipSchema{value: val, isSet: true}
}

func (v NullableApiRelationshipSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRelationshipSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


