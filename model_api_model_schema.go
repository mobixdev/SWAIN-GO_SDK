/*
SWAIN API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiModelSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiModelSchema{}

// ApiModelSchema Schema information for a model including fields and relationships
type ApiModelSchema struct {
	// Fields contains information about each field in the model
	Fields []ApiFieldSchema `json:"fields,omitempty"`
	// Relationships contains information about model relationships
	Relationships []ApiRelationshipSchema `json:"relationships,omitempty"`
}

// NewApiModelSchema instantiates a new ApiModelSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiModelSchema() *ApiModelSchema {
	this := ApiModelSchema{}
	return &this
}

// NewApiModelSchemaWithDefaults instantiates a new ApiModelSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiModelSchemaWithDefaults() *ApiModelSchema {
	this := ApiModelSchema{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ApiModelSchema) GetFields() []ApiFieldSchema {
	if o == nil || IsNil(o.Fields) {
		var ret []ApiFieldSchema
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiModelSchema) GetFieldsOk() ([]ApiFieldSchema, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ApiModelSchema) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []ApiFieldSchema and assigns it to the Fields field.
func (o *ApiModelSchema) SetFields(v []ApiFieldSchema) {
	o.Fields = v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *ApiModelSchema) GetRelationships() []ApiRelationshipSchema {
	if o == nil || IsNil(o.Relationships) {
		var ret []ApiRelationshipSchema
		return ret
	}
	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiModelSchema) GetRelationshipsOk() ([]ApiRelationshipSchema, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *ApiModelSchema) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []ApiRelationshipSchema and assigns it to the Relationships field.
func (o *ApiModelSchema) SetRelationships(v []ApiRelationshipSchema) {
	o.Relationships = v
}

func (o ApiModelSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiModelSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	return toSerialize, nil
}

type NullableApiModelSchema struct {
	value *ApiModelSchema
	isSet bool
}

func (v NullableApiModelSchema) Get() *ApiModelSchema {
	return v.value
}

func (v *NullableApiModelSchema) Set(val *ApiModelSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableApiModelSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableApiModelSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiModelSchema(val *ApiModelSchema) *NullableApiModelSchema {
	return &NullableApiModelSchema{value: val, isSet: true}
}

func (v NullableApiModelSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiModelSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


