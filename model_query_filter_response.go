/*
SWAIN API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryFilterResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryFilterResponse{}

// QueryFilterResponse Paginated response containing filtered entities and metadata Used for both simple list operations and complex filtered queries Contains both the data and pagination information
type QueryFilterResponse struct {
	// @Description Array of entities matching the filter conditions @Description For relationship queries, includes related entities based on the filter @Description The actual type depends on the entity being queried
	Data map[string]interface{} `json:"data,omitempty"`
	// @Description Current page number (1-based indexing) @Description Example: page=2 returns the second page of results @Description Default is 1 if not specified
	Page *int32 `json:"page,omitempty"`
	// @Description Number of items per page (default may vary) @Description Example: page_size=20 returns 20 items per page @Description Default is typically 10 or 20 depending on configuration
	PageSize *int32 `json:"page_size,omitempty"`
	// @Description Total number of records matching the filter conditions @Description Used for calculating pagination metadata @Description May be estimated for very large result sets
	Total *int32 `json:"total,omitempty"`
	// @Description Total number of pages based on total records and page size @Description Calculated as ceil(total/page_size) @Description Used for pagination UI components
	TotalPages *int32 `json:"total_pages,omitempty"`
}

// NewQueryFilterResponse instantiates a new QueryFilterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryFilterResponse() *QueryFilterResponse {
	this := QueryFilterResponse{}
	return &this
}

// NewQueryFilterResponseWithDefaults instantiates a new QueryFilterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryFilterResponseWithDefaults() *QueryFilterResponse {
	this := QueryFilterResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *QueryFilterResponse) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilterResponse) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *QueryFilterResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *QueryFilterResponse) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *QueryFilterResponse) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilterResponse) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *QueryFilterResponse) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *QueryFilterResponse) SetPage(v int32) {
	o.Page = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *QueryFilterResponse) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilterResponse) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *QueryFilterResponse) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *QueryFilterResponse) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *QueryFilterResponse) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilterResponse) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *QueryFilterResponse) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *QueryFilterResponse) SetTotal(v int32) {
	o.Total = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *QueryFilterResponse) GetTotalPages() int32 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilterResponse) GetTotalPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *QueryFilterResponse) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int32 and assigns it to the TotalPages field.
func (o *QueryFilterResponse) SetTotalPages(v int32) {
	o.TotalPages = &v
}

func (o QueryFilterResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryFilterResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.PageSize) {
		toSerialize["page_size"] = o.PageSize
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.TotalPages) {
		toSerialize["total_pages"] = o.TotalPages
	}
	return toSerialize, nil
}

type NullableQueryFilterResponse struct {
	value *QueryFilterResponse
	isSet bool
}

func (v NullableQueryFilterResponse) Get() *QueryFilterResponse {
	return v.value
}

func (v *NullableQueryFilterResponse) Set(val *QueryFilterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFilterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFilterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFilterResponse(val *QueryFilterResponse) *NullableQueryFilterResponse {
	return &NullableQueryFilterResponse{value: val, isSet: true}
}

func (v NullableQueryFilterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFilterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


