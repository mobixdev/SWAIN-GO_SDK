/*
SWAIN API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QuerySortSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuerySortSpec{}

// QuerySortSpec Specifies a field and the direction for sorting (ascending or descending) Example: {\"field\": \"name\", \"direction\": \"asc\"} Field names can be struct field names, JSON field names, or database column names
type QuerySortSpec struct {
	// @Description The sort direction: \"asc\" for ascending, \"desc\" for descending @Description Case-insensitive, so \"ASC\", \"asc\", and \"Asc\" are all valid
	Direction *string `json:"direction,omitempty"`
	// @Description The name of the field to sort by @Description Can be a struct field name (e.g., \"FirstName\"), JSON field name (from json tag), @Description or database column name (e.g., \"first_name\")
	Field *string `json:"field,omitempty"`
}

// NewQuerySortSpec instantiates a new QuerySortSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuerySortSpec() *QuerySortSpec {
	this := QuerySortSpec{}
	return &this
}

// NewQuerySortSpecWithDefaults instantiates a new QuerySortSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuerySortSpecWithDefaults() *QuerySortSpec {
	this := QuerySortSpec{}
	return &this
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *QuerySortSpec) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySortSpec) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *QuerySortSpec) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *QuerySortSpec) SetDirection(v string) {
	o.Direction = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *QuerySortSpec) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySortSpec) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *QuerySortSpec) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *QuerySortSpec) SetField(v string) {
	o.Field = &v
}

func (o QuerySortSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuerySortSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	return toSerialize, nil
}

type NullableQuerySortSpec struct {
	value *QuerySortSpec
	isSet bool
}

func (v NullableQuerySortSpec) Get() *QuerySortSpec {
	return v.value
}

func (v *NullableQuerySortSpec) Set(val *QuerySortSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySortSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySortSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySortSpec(val *QuerySortSpec) *NullableQuerySortSpec {
	return &NullableQuerySortSpec{value: val, isSet: true}
}

func (v NullableQuerySortSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySortSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


