/*
SWAIN API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryAggregationSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryAggregationSpec{}

// QueryAggregationSpec Allows specifying functions like COUNT, SUM on fields, with an optional group-by clause Used for aggregating data in queries, similar to SQL GROUP BY with aggregate functions Example: {\"functions\": [{\"type\": \"COUNT\", \"field\": \"id\"}], \"group_by\": [\"status\"]}
type QueryAggregationSpec struct {
	// @Description Optional aggregator-based conditions to be applied in a HAVING clause (if using SQL) @Description These expressions may reference aggregator functions like SUM(...) or COUNT(...)
	Expressions []map[string]interface{} `json:"expressions,omitempty"`
	// @Description A list of aggregation functions (e.g., COUNT, SUM, MIN, MAX) to apply @Description Each function specifies the type, field, and optional alias
	Functions []QueryAggregateFunctionSpec `json:"functions,omitempty"`
	// @Description Fields for grouping results (e.g., by \"status\" or [\"status\",\"category\"]) @Description Similar to SQL GROUP BY clause
	GroupBy []string `json:"group_by,omitempty"`
}

// NewQueryAggregationSpec instantiates a new QueryAggregationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryAggregationSpec() *QueryAggregationSpec {
	this := QueryAggregationSpec{}
	return &this
}

// NewQueryAggregationSpecWithDefaults instantiates a new QueryAggregationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryAggregationSpecWithDefaults() *QueryAggregationSpec {
	this := QueryAggregationSpec{}
	return &this
}

// GetExpressions returns the Expressions field value if set, zero value otherwise.
func (o *QueryAggregationSpec) GetExpressions() []map[string]interface{} {
	if o == nil || IsNil(o.Expressions) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Expressions
}

// GetExpressionsOk returns a tuple with the Expressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryAggregationSpec) GetExpressionsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Expressions) {
		return nil, false
	}
	return o.Expressions, true
}

// HasExpressions returns a boolean if a field has been set.
func (o *QueryAggregationSpec) HasExpressions() bool {
	if o != nil && !IsNil(o.Expressions) {
		return true
	}

	return false
}

// SetExpressions gets a reference to the given []map[string]interface{} and assigns it to the Expressions field.
func (o *QueryAggregationSpec) SetExpressions(v []map[string]interface{}) {
	o.Expressions = v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *QueryAggregationSpec) GetFunctions() []QueryAggregateFunctionSpec {
	if o == nil || IsNil(o.Functions) {
		var ret []QueryAggregateFunctionSpec
		return ret
	}
	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryAggregationSpec) GetFunctionsOk() ([]QueryAggregateFunctionSpec, bool) {
	if o == nil || IsNil(o.Functions) {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *QueryAggregationSpec) HasFunctions() bool {
	if o != nil && !IsNil(o.Functions) {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []QueryAggregateFunctionSpec and assigns it to the Functions field.
func (o *QueryAggregationSpec) SetFunctions(v []QueryAggregateFunctionSpec) {
	o.Functions = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *QueryAggregationSpec) GetGroupBy() []string {
	if o == nil || IsNil(o.GroupBy) {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryAggregationSpec) GetGroupByOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *QueryAggregationSpec) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *QueryAggregationSpec) SetGroupBy(v []string) {
	o.GroupBy = v
}

func (o QueryAggregationSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryAggregationSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expressions) {
		toSerialize["expressions"] = o.Expressions
	}
	if !IsNil(o.Functions) {
		toSerialize["functions"] = o.Functions
	}
	if !IsNil(o.GroupBy) {
		toSerialize["group_by"] = o.GroupBy
	}
	return toSerialize, nil
}

type NullableQueryAggregationSpec struct {
	value *QueryAggregationSpec
	isSet bool
}

func (v NullableQueryAggregationSpec) Get() *QueryAggregationSpec {
	return v.value
}

func (v *NullableQueryAggregationSpec) Set(val *QueryAggregationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryAggregationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryAggregationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryAggregationSpec(val *QueryAggregationSpec) *NullableQueryAggregationSpec {
	return &NullableQueryAggregationSpec{value: val, isSet: true}
}

func (v NullableQueryAggregationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryAggregationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


