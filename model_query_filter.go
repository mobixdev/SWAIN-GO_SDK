/*
SWAIN API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryFilter{}

// QueryFilter Filter conditions for querying entities using complex expressions Supports logical operations (AND, OR, NOT), field comparisons, and relationship filtering Example: { \"expressions\": [ {\"field\": \"age\", \"operator\": \"gte\", \"value\": 18}, { \"operator\": \"AND\", \"expressions\": [ {\"field\": \"status\", \"operator\": \"eq\", \"value\": \"active\"} ] } ] }
type QueryFilter struct {
	// @Description Aggregations can specify functions like COUNT, SUM, GROUP BY, etc. @Description If not provided, no aggregations will be performed. @Description Used for data analysis and reporting queries
	Aggregations *QueryAggregationSpec `json:"aggregations,omitempty"`
	// @Description Array of expressions to filter entities @Description Each expression can be a FieldExpression, LogicalExpression, or RelationshipExpression @Description If empty, no filtering will be applied
	Expressions []map[string]interface{} `json:"expressions,omitempty"`
	// @Description Array of field names to select from the main entity @Description If empty, all fields will be selected @Description Example: [\"id\", \"name\", \"email\"] to select only those fields
	Projections []string `json:"projections,omitempty"`
	// @Description Array of sort specifications to order the results @Description Example: [{\"field\": \"name\", \"direction\": \"asc\"}, {\"field\": \"createdAt\", \"direction\": \"desc\"}] @Description Field names can be struct field names or database column names. Direction is case-insensitive ('asc' or 'desc').
	Sort []QuerySortSpec `json:"sort,omitempty"`
}

// NewQueryFilter instantiates a new QueryFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryFilter() *QueryFilter {
	this := QueryFilter{}
	return &this
}

// NewQueryFilterWithDefaults instantiates a new QueryFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryFilterWithDefaults() *QueryFilter {
	this := QueryFilter{}
	return &this
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *QueryFilter) GetAggregations() QueryAggregationSpec {
	if o == nil || IsNil(o.Aggregations) {
		var ret QueryAggregationSpec
		return ret
	}
	return *o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetAggregationsOk() (*QueryAggregationSpec, bool) {
	if o == nil || IsNil(o.Aggregations) {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *QueryFilter) HasAggregations() bool {
	if o != nil && !IsNil(o.Aggregations) {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given QueryAggregationSpec and assigns it to the Aggregations field.
func (o *QueryFilter) SetAggregations(v QueryAggregationSpec) {
	o.Aggregations = &v
}

// GetExpressions returns the Expressions field value if set, zero value otherwise.
func (o *QueryFilter) GetExpressions() []map[string]interface{} {
	if o == nil || IsNil(o.Expressions) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Expressions
}

// GetExpressionsOk returns a tuple with the Expressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetExpressionsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Expressions) {
		return nil, false
	}
	return o.Expressions, true
}

// HasExpressions returns a boolean if a field has been set.
func (o *QueryFilter) HasExpressions() bool {
	if o != nil && !IsNil(o.Expressions) {
		return true
	}

	return false
}

// SetExpressions gets a reference to the given []map[string]interface{} and assigns it to the Expressions field.
func (o *QueryFilter) SetExpressions(v []map[string]interface{}) {
	o.Expressions = v
}

// GetProjections returns the Projections field value if set, zero value otherwise.
func (o *QueryFilter) GetProjections() []string {
	if o == nil || IsNil(o.Projections) {
		var ret []string
		return ret
	}
	return o.Projections
}

// GetProjectionsOk returns a tuple with the Projections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetProjectionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Projections) {
		return nil, false
	}
	return o.Projections, true
}

// HasProjections returns a boolean if a field has been set.
func (o *QueryFilter) HasProjections() bool {
	if o != nil && !IsNil(o.Projections) {
		return true
	}

	return false
}

// SetProjections gets a reference to the given []string and assigns it to the Projections field.
func (o *QueryFilter) SetProjections(v []string) {
	o.Projections = v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *QueryFilter) GetSort() []QuerySortSpec {
	if o == nil || IsNil(o.Sort) {
		var ret []QuerySortSpec
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFilter) GetSortOk() ([]QuerySortSpec, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *QueryFilter) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []QuerySortSpec and assigns it to the Sort field.
func (o *QueryFilter) SetSort(v []QuerySortSpec) {
	o.Sort = v
}

func (o QueryFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregations) {
		toSerialize["aggregations"] = o.Aggregations
	}
	if !IsNil(o.Expressions) {
		toSerialize["expressions"] = o.Expressions
	}
	if !IsNil(o.Projections) {
		toSerialize["projections"] = o.Projections
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	return toSerialize, nil
}

type NullableQueryFilter struct {
	value *QueryFilter
	isSet bool
}

func (v NullableQueryFilter) Get() *QueryFilter {
	return v.value
}

func (v *NullableQueryFilter) Set(val *QueryFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFilter(val *QueryFilter) *NullableQueryFilter {
	return &NullableQueryFilter{value: val, isSet: true}
}

func (v NullableQueryFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


