/*
SWAIN API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryAggregateFunctionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryAggregateFunctionSpec{}

// QueryAggregateFunctionSpec Example: { \"type\": \"COUNT\", \"field\": \"id\", \"alias\": \"count_of_id\" } Represents a single aggregation operation to perform on data
type QueryAggregateFunctionSpec struct {
	// @Description Optional alias for the result of this aggregation @Description If omitted, the function name may be used as an alias @Description Example: \"total_amount\" for SUM(amount)
	Alias *string `json:"alias,omitempty"`
	// @Description The field on which the aggregation function is applied @Description For COUNT(*), use \"*\" or leave empty
	Field *string `json:"field,omitempty"`
	// @Description The aggregation function type (e.g., COUNT, SUM, MIN, MAX) @Description Common types: COUNT, SUM, AVG, MIN, MAX
	Type *string `json:"type,omitempty"`
}

// NewQueryAggregateFunctionSpec instantiates a new QueryAggregateFunctionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryAggregateFunctionSpec() *QueryAggregateFunctionSpec {
	this := QueryAggregateFunctionSpec{}
	return &this
}

// NewQueryAggregateFunctionSpecWithDefaults instantiates a new QueryAggregateFunctionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryAggregateFunctionSpecWithDefaults() *QueryAggregateFunctionSpec {
	this := QueryAggregateFunctionSpec{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *QueryAggregateFunctionSpec) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryAggregateFunctionSpec) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *QueryAggregateFunctionSpec) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *QueryAggregateFunctionSpec) SetAlias(v string) {
	o.Alias = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *QueryAggregateFunctionSpec) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryAggregateFunctionSpec) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *QueryAggregateFunctionSpec) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *QueryAggregateFunctionSpec) SetField(v string) {
	o.Field = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QueryAggregateFunctionSpec) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryAggregateFunctionSpec) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QueryAggregateFunctionSpec) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *QueryAggregateFunctionSpec) SetType(v string) {
	o.Type = &v
}

func (o QueryAggregateFunctionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryAggregateFunctionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableQueryAggregateFunctionSpec struct {
	value *QueryAggregateFunctionSpec
	isSet bool
}

func (v NullableQueryAggregateFunctionSpec) Get() *QueryAggregateFunctionSpec {
	return v.value
}

func (v *NullableQueryAggregateFunctionSpec) Set(val *QueryAggregateFunctionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryAggregateFunctionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryAggregateFunctionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryAggregateFunctionSpec(val *QueryAggregateFunctionSpec) *NullableQueryAggregateFunctionSpec {
	return &NullableQueryAggregateFunctionSpec{value: val, isSet: true}
}

func (v NullableQueryAggregateFunctionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryAggregateFunctionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


